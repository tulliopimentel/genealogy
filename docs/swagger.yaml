definitions:
  models.Family:
    properties:
      family:
        items:
          $ref: '#/definitions/models.Family'
        type: array
      id:
        type: integer
      person:
        $ref: '#/definitions/models.Person'
      personFamily:
        $ref: '#/definitions/models.Person'
      personID:
        type: integer
      relationship:
        $ref: '#/definitions/models.Relationship'
    type: object
  models.Genealogy:
    properties:
      id:
        type: integer
      person:
        $ref: '#/definitions/models.Person'
      personFamily:
        items:
          $ref: '#/definitions/models.Family'
        type: array
      personID:
        type: integer
    type: object
  models.Person:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Relationship:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:5050
info:
  contact:
    url: https://www.linkedin.com/in/tulliopimentelbarbosa/
  description: This is the documentation of the Genealogy API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Genealogy API
  version: "1.0"
paths:
  /v1/person:
    delete:
      description: will delete a person of the database
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Person'
        "404":
          description: Not Found
          schema:
            type: object
      summary: DeletePerson() will delete a person in database
      tags:
      - Delete a Person
    get:
      description: Get all persons of the database, even if is not related to each
        other
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Person'
            type: array
        "404":
          description: Not Found
          schema:
            type: object
      summary: Get all persons of the database
      tags:
      - Show all persons
    post:
      description: Insert a new person into the database, and you can create a new
        family tree with this person. You can also update some person, you just have
        to input the ID following by the name you want to update. If you wanna just
        insert a new name, no needs of insert an ID
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Person'
            type: array
        "404":
          description: Not Found
          schema:
            type: object
      summary: CreatePerson() Create a new person
      tags:
      - Create person
  /v1/person/{id}:
    get:
      description: Returns the closest family members to the reference person, without
        delving into the family tree of the other members
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Genealogy'
            type: array
        "404":
          description: Not Found
          schema:
            type: object
      summary: ShowFamily() Returns the closest family members to the reference person
      tags:
      - Show Family Tree
  /v1/person/family:
    delete:
      description: In this endpoint you can delete a family
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Family'
        "404":
          description: Not Found
          schema:
            type: object
      summary: delete a row from the 'families' table from the family ID
      tags:
      - Delete a family
    post:
      description: In this endpoint you can create a family, that is, put the ID of
        the reference person, another person and the relationship between the two
        in the database. All by ID. You can also update a family row if you put and
        ID that already exists
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Family'
        "404":
          description: Not Found
          schema:
            type: object
      summary: Creates the relationship between two people to create a family and
        family tree
      tags:
      - Create a new family
  /v1/person/genealogy/{id}:
    get:
      description: This endpoint will go deep, will get all the persons of the family
        tree. That means will get all persons related to each other
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Genealogy'
            type: array
        "404":
          description: Not Found
          schema:
            type: object
      summary: Get the entire genealogy of the family of the referenced person
      tags:
      - Show the entire Genealogy
    post:
      description: This table has just two columns in database, that means you will
        just put the ID of the referenced person in the table family.
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Genealogy'
            type: array
        "404":
          description: Not Found
          schema:
            type: object
      summary: Create a new reference (person ID) for a new Genealogy, which is relate
        to the table 'family'
      tags:
      - Create a new Genealogy
swagger: "2.0"
